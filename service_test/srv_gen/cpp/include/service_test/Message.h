/* Auto-generated by genmsg_cpp for file /home/rmb-rj/git/ros-test/service_test/srv/Message.srv */
#ifndef SERVICE_TEST_SERVICE_MESSAGE_H
#define SERVICE_TEST_SERVICE_MESSAGE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace service_test
{
template <class ContainerAllocator>
struct MessageRequest_ {
  typedef MessageRequest_<ContainerAllocator> Type;

  MessageRequest_()
  : number(0.0)
  {
  }

  MessageRequest_(const ContainerAllocator& _alloc)
  : number(0.0)
  {
  }

  typedef double _number_type;
  double number;


  typedef boost::shared_ptr< ::service_test::MessageRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::service_test::MessageRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MessageRequest
typedef  ::service_test::MessageRequest_<std::allocator<void> > MessageRequest;

typedef boost::shared_ptr< ::service_test::MessageRequest> MessageRequestPtr;
typedef boost::shared_ptr< ::service_test::MessageRequest const> MessageRequestConstPtr;



template <class ContainerAllocator>
struct MessageResponse_ {
  typedef MessageResponse_<ContainerAllocator> Type;

  MessageResponse_()
  : numberIncreased(0.0)
  {
  }

  MessageResponse_(const ContainerAllocator& _alloc)
  : numberIncreased(0.0)
  {
  }

  typedef double _numberIncreased_type;
  double numberIncreased;


  typedef boost::shared_ptr< ::service_test::MessageResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::service_test::MessageResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MessageResponse
typedef  ::service_test::MessageResponse_<std::allocator<void> > MessageResponse;

typedef boost::shared_ptr< ::service_test::MessageResponse> MessageResponsePtr;
typedef boost::shared_ptr< ::service_test::MessageResponse const> MessageResponseConstPtr;


struct Message
{

typedef MessageRequest Request;
typedef MessageResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct Message
} // namespace service_test

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::service_test::MessageRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::service_test::MessageRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::service_test::MessageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4dcebbc33e65171f948c63edad2d5dae";
  }

  static const char* value(const  ::service_test::MessageRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4dcebbc33e65171fULL;
  static const uint64_t static_value2 = 0x948c63edad2d5daeULL;
};

template<class ContainerAllocator>
struct DataType< ::service_test::MessageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "service_test/MessageRequest";
  }

  static const char* value(const  ::service_test::MessageRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::service_test::MessageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
\n\
float64 number\n\
\n\
";
  }

  static const char* value(const  ::service_test::MessageRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::service_test::MessageRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::service_test::MessageResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::service_test::MessageResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::service_test::MessageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f665e30a565f32d26769b063c7397e40";
  }

  static const char* value(const  ::service_test::MessageResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf665e30a565f32d2ULL;
  static const uint64_t static_value2 = 0x6769b063c7397e40ULL;
};

template<class ContainerAllocator>
struct DataType< ::service_test::MessageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "service_test/MessageResponse";
  }

  static const char* value(const  ::service_test::MessageResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::service_test::MessageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
float64 numberIncreased\n\
\n\
\n\
";
  }

  static const char* value(const  ::service_test::MessageResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::service_test::MessageResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::service_test::MessageRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.number);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MessageRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::service_test::MessageResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.numberIncreased);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MessageResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<service_test::Message> {
  static const char* value() 
  {
    return "57ffe8ccf80221db899192d7c80330c2";
  }

  static const char* value(const service_test::Message&) { return value(); } 
};

template<>
struct DataType<service_test::Message> {
  static const char* value() 
  {
    return "service_test/Message";
  }

  static const char* value(const service_test::Message&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<service_test::MessageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "57ffe8ccf80221db899192d7c80330c2";
  }

  static const char* value(const service_test::MessageRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<service_test::MessageRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "service_test/Message";
  }

  static const char* value(const service_test::MessageRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<service_test::MessageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "57ffe8ccf80221db899192d7c80330c2";
  }

  static const char* value(const service_test::MessageResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<service_test::MessageResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "service_test/Message";
  }

  static const char* value(const service_test::MessageResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SERVICE_TEST_SERVICE_MESSAGE_H

